const { zokou } = require("../framework/zokou");
const axios = require("axios");

zokou({ nomCom: "gpt", reaction: "üåê", categorie: "IA" }, async (dest, zk, commandeOptions) => {
  const { repondre, arg, ms } = commandeOptions;

  try {
    // V√©rifier si l'utilisateur a fourni une question
    if (!arg || arg.length === 0) {
      return repondre("Veuillez poser une question.");
    }

    // Regrouper les arguments en une seule cha√Æne s√©par√©e par des espaces
    const question = arg.join(" ");

    // Construire l'URL de la requ√™te √† l'API avec la nouvelle URL
    const apiUrl = `https://api.giftedtech.my.id/api/ai/gpt?apikey=gifted&q=${encodeURIComponent(question)}`;

    // Effectuer la requ√™te √† l'API
    const response = await axios.get(apiUrl);

    // Extraire les donn√©es de la r√©ponse de l'API
    const { data } = response;

    // V√©rifier si la r√©ponse de l'API contient un r√©sultat
    if (data && data.result) {
      // Renvoyer la r√©ponse de l'API √† l'utilisateur
      repondre(data.result);
    } else {
      // Si la r√©ponse de l'API ne contient pas de r√©sultat, renvoyer un message d'erreur
      repondre("Erreur lors de la g√©n√©ration de la r√©ponse. Veuillez r√©essayer.");
    }
  } catch (error) {
    // G√©rer les erreurs √©ventuelles lors de l'appel √† l'API
    console.error("Erreur:", error.message || "Une erreur s'est produite");
    repondre("Oups, une erreur est survenue lors du traitement de votre demande. Veuillez r√©essayer plus tard.");
  }
});
